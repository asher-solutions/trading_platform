setup


Setup Initial File Structure:

trading_project
├── manage.py
├── trading_project
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── myapp      <----- a normal Django app
│   ├── __init__.py
│   ├── models.py
│   ├── urls.py
│   └── views.py
├── assets     <----- our front-end project source
│   ├── javascript
│   └── styles
├── static     <----- our front-end project outputs (and other Django static files)
│   ├── css
│   ├── images
│   └── js
└── templates  <----- our Django template files
    └── myapp



Then from the root of the django project:
C:\Asher Projects\Algorithmic Trading Platform\Version Control\V1\trading_project>

Perform in the terminal:
npm init -y
npm install webpack webpack-cli --save-dev

The first thing we do is install Babel (@babel/core), its webpack loader babel-loader and our two presets, all as development dependencies:

npm install --save-dev babel-loader @babel/core @babel/preset-env @babel/preset-react

Next we have to tell webpack to use this preset to process our files. This is done via a loader. We just need to add the following section to our webpack.config.js.

  module: {
    rules: [
      {
        test: /\.(js|jsx)$/,
        exclude: /node_modules/,
        loader: "babel-loader",
        options: { presets: ["@babel/preset-env", "@babel/preset-react"] }
      },
    ]
  }

In English the summary is: "use Babel's env and react presets to compile all .js and .jsx files that aren't inside the node_modules directory".

npm install --save react react-dom

